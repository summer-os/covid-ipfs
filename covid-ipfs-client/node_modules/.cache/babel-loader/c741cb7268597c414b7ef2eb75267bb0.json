{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/esm/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { arrayMoveImmutable } from '@ant-design/pro-utils';\n/**\n * 检查值是否存在 为了 避开 0 和 false\n *\n * @param value\n */\n\nexport var checkUndefinedOrNull = function checkUndefinedOrNull(value) {\n  return value !== undefined && value !== null;\n};\n/**\n * 合并用户 props 和 预设的 props\n *\n * @param pagination\n * @param action\n * @param intl\n */\n\nexport function mergePagination(pagination, pageInfo, intl) {\n  if (pagination === false) {\n    return false;\n  }\n\n  var total = pageInfo.total,\n      current = pageInfo.current,\n      pageSize = pageInfo.pageSize,\n      setPageInfo = pageInfo.setPageInfo;\n  var defaultPagination = _typeof(pagination) === 'object' ? pagination : {};\n  return _objectSpread(_objectSpread({\n    showTotal: function showTotal(all, range) {\n      return \"\".concat(intl.getMessage('pagination.total.range', '第'), \" \").concat(range[0], \"-\").concat(range[1], \" \").concat(intl.getMessage('pagination.total.total', '条/总共'), \" \").concat(all, \" \").concat(intl.getMessage('pagination.total.item', '条'));\n    },\n    total: total\n  }, defaultPagination), {}, {\n    current: current,\n    pageSize: pageSize,\n    onChange: function onChange(page, newPageSize) {\n      var onChange = pagination.onChange;\n      onChange === null || onChange === void 0 ? void 0 : onChange(page, newPageSize || 20); // pageSize 改变之后就没必要切换页码\n\n      if (newPageSize !== pageSize || current !== page) {\n        setPageInfo({\n          pageSize: newPageSize,\n          current: page\n        });\n      }\n    }\n  });\n}\n/**\n * 获取用户的 action 信息\n *\n * @param actionRef\n * @param counter\n * @param onCleanSelected\n */\n\nexport function useActionType(ref, action, props) {\n  /** 这里生成action的映射，保证 action 总是使用的最新 只需要渲染一次即可 */\n  var userAction = _objectSpread(_objectSpread({}, props.editableUtils), {}, {\n    pageInfo: action.pageInfo,\n    reload: function () {\n      var _reload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resetPageIndex) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!resetPageIndex) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return action.setPageInfo({\n                  current: 1\n                });\n\n              case 3:\n                action === null || action === void 0 ? void 0 : action.reload();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function reload(_x) {\n        return _reload.apply(this, arguments);\n      }\n\n      return reload;\n    }(),\n    reloadAndRest: function () {\n      var _reloadAndRest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // reload 之后大概率会切换数据，清空一下选择。\n                props.onCleanSelected();\n                _context2.next = 3;\n                return action.setPageInfo({\n                  current: 1\n                });\n\n              case 3:\n                _context2.next = 5;\n                return action === null || action === void 0 ? void 0 : action.reload();\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function reloadAndRest() {\n        return _reloadAndRest.apply(this, arguments);\n      }\n\n      return reloadAndRest;\n    }(),\n    reset: function () {\n      var _reset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _action$reset;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return props.resetAll();\n\n              case 2:\n                _context3.next = 4;\n                return action === null || action === void 0 ? void 0 : (_action$reset = action.reset) === null || _action$reset === void 0 ? void 0 : _action$reset.call(action);\n\n              case 4:\n                _context3.next = 6;\n                return action === null || action === void 0 ? void 0 : action.reload();\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function reset() {\n        return _reset.apply(this, arguments);\n      }\n\n      return reset;\n    }(),\n    fullScreen: function fullScreen() {\n      return props.fullScreen();\n    },\n    clearSelected: function clearSelected() {\n      return props.onCleanSelected();\n    },\n    setPageInfo: function setPageInfo(rest) {\n      return action.setPageInfo(rest);\n    }\n  }); // eslint-disable-next-line no-param-reassign\n\n\n  ref.current = userAction;\n}\n/**\n * 一个转化的 pipeline 列表\n *\n * @param data\n * @param pipeline\n */\n\nexport function postDataPipeline(data, pipeline) {\n  if (pipeline.filter(function (item) {\n    return item;\n  }).length < 1) {\n    return data;\n  }\n\n  return pipeline.reduce(function (pre, postData) {\n    return postData(pre);\n  }, data);\n}\nexport var isBordered = function isBordered(borderType, border) {\n  if (border === undefined) {\n    return false;\n  } // debugger\n\n\n  if (typeof border === 'boolean') {\n    return border;\n  }\n\n  return border[borderType];\n};\nexport var isMergeCell = function isMergeCell(dom) {\n  var _dom$props;\n\n  return dom && _typeof(dom) === 'object' && (dom === null || dom === void 0 ? void 0 : (_dom$props = dom.props) === null || _dom$props === void 0 ? void 0 : _dom$props.colSpan);\n};\n/**\n * 根据 key 和 dataIndex 生成唯一 id\n *\n * @param key 用户设置的 key\n * @param dataIndex 在对象中的数据\n * @param index 序列号，理论上唯一\n */\n\nexport var genColumnKey = function genColumnKey(key, index) {\n  if (key) {\n    return Array.isArray(key) ? key.join('-') : key.toString();\n  }\n\n  return \"\".concat(index);\n};\n/**\n * 将 ProTable - column - dataIndex 转为字符串形式\n *\n * @param dataIndex Column 中的 dataIndex\n */\n\nfunction parseDataIndex(dataIndex) {\n  if (Array.isArray(dataIndex)) {\n    return dataIndex.join(',');\n  }\n\n  return dataIndex === null || dataIndex === void 0 ? void 0 : dataIndex.toString();\n}\n/**\n * 从 ProColumns 数组中取出默认的排序和筛选数据\n *\n * @param columns ProColumns\n */\n\n\nexport function parseDefaultColumnConfig(columns) {\n  var filter = {};\n  var sort = {};\n  columns.forEach(function (column) {\n    // 转换 dataIndex\n    var dataIndex = parseDataIndex(column.dataIndex);\n\n    if (!dataIndex) {\n      return;\n    } // 当 column 启用 filters 功能时，取出默认的筛选值\n\n\n    if (column.filters) {\n      var defaultFilteredValue = column.defaultFilteredValue;\n\n      if (defaultFilteredValue === undefined) {\n        filter[dataIndex] = null;\n      } else {\n        filter[dataIndex] = column.defaultFilteredValue;\n      }\n    } // 当 column 启用 sorter 功能时，取出默认的排序值\n\n\n    if (column.sorter && column.defaultSortOrder) {\n      sort[dataIndex] = column.defaultSortOrder;\n    }\n  });\n  return {\n    sort: sort,\n    filter: filter\n  };\n}\n/**\n * 数据排序核心逻辑\n *\n * @param oldIndex 原始位置\n * @param newIndex 新位置\n * @param data 原始数组\n */\n\nexport function sortData(_ref, data) {\n  var oldIndex = _ref.oldIndex,\n      newIndex = _ref.newIndex;\n\n  if (oldIndex !== newIndex) {\n    var newData = arrayMoveImmutable(_toConsumableArray(data || []), oldIndex, newIndex).filter(function (el) {\n      return !!el;\n    });\n    return _toConsumableArray(newData);\n  }\n  /* istanbul ignore next */\n\n\n  return null;\n}","map":{"version":3,"sources":["/Users/jameszow/Documents/RustWorkSpace/covid-ipfs/covid-ipfs-client/node_modules/@ant-design/pro-table/es/utils/index.js"],"names":["_toConsumableArray","_regeneratorRuntime","_asyncToGenerator","_objectSpread","_typeof","arrayMoveImmutable","checkUndefinedOrNull","value","undefined","mergePagination","pagination","pageInfo","intl","total","current","pageSize","setPageInfo","defaultPagination","showTotal","all","range","concat","getMessage","onChange","page","newPageSize","useActionType","ref","action","props","userAction","editableUtils","reload","_reload","mark","_callee","resetPageIndex","wrap","_callee$","_context","prev","next","stop","_x","apply","arguments","reloadAndRest","_reloadAndRest","_callee2","_callee2$","_context2","onCleanSelected","reset","_reset","_callee3","_action$reset","_callee3$","_context3","resetAll","call","fullScreen","clearSelected","rest","postDataPipeline","data","pipeline","filter","item","length","reduce","pre","postData","isBordered","borderType","border","isMergeCell","dom","_dom$props","colSpan","genColumnKey","key","index","Array","isArray","join","toString","parseDataIndex","dataIndex","parseDefaultColumnConfig","columns","sort","forEach","column","filters","defaultFilteredValue","sorter","defaultSortOrder","sortData","_ref","oldIndex","newIndex","newData","el"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/esm/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { arrayMoveImmutable } from '@ant-design/pro-utils';\n/**\n * 检查值是否存在 为了 避开 0 和 false\n *\n * @param value\n */\n\nexport var checkUndefinedOrNull = function checkUndefinedOrNull(value) {\n  return value !== undefined && value !== null;\n};\n/**\n * 合并用户 props 和 预设的 props\n *\n * @param pagination\n * @param action\n * @param intl\n */\n\nexport function mergePagination(pagination, pageInfo, intl) {\n  if (pagination === false) {\n    return false;\n  }\n\n  var total = pageInfo.total,\n      current = pageInfo.current,\n      pageSize = pageInfo.pageSize,\n      setPageInfo = pageInfo.setPageInfo;\n  var defaultPagination = _typeof(pagination) === 'object' ? pagination : {};\n  return _objectSpread(_objectSpread({\n    showTotal: function showTotal(all, range) {\n      return \"\".concat(intl.getMessage('pagination.total.range', '第'), \" \").concat(range[0], \"-\").concat(range[1], \" \").concat(intl.getMessage('pagination.total.total', '条/总共'), \" \").concat(all, \" \").concat(intl.getMessage('pagination.total.item', '条'));\n    },\n    total: total\n  }, defaultPagination), {}, {\n    current: current,\n    pageSize: pageSize,\n    onChange: function onChange(page, newPageSize) {\n      var onChange = pagination.onChange;\n      onChange === null || onChange === void 0 ? void 0 : onChange(page, newPageSize || 20); // pageSize 改变之后就没必要切换页码\n\n      if (newPageSize !== pageSize || current !== page) {\n        setPageInfo({\n          pageSize: newPageSize,\n          current: page\n        });\n      }\n    }\n  });\n}\n/**\n * 获取用户的 action 信息\n *\n * @param actionRef\n * @param counter\n * @param onCleanSelected\n */\n\nexport function useActionType(ref, action, props) {\n  /** 这里生成action的映射，保证 action 总是使用的最新 只需要渲染一次即可 */\n  var userAction = _objectSpread(_objectSpread({}, props.editableUtils), {}, {\n    pageInfo: action.pageInfo,\n    reload: function () {\n      var _reload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resetPageIndex) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!resetPageIndex) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return action.setPageInfo({\n                  current: 1\n                });\n\n              case 3:\n                action === null || action === void 0 ? void 0 : action.reload();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function reload(_x) {\n        return _reload.apply(this, arguments);\n      }\n\n      return reload;\n    }(),\n    reloadAndRest: function () {\n      var _reloadAndRest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // reload 之后大概率会切换数据，清空一下选择。\n                props.onCleanSelected();\n                _context2.next = 3;\n                return action.setPageInfo({\n                  current: 1\n                });\n\n              case 3:\n                _context2.next = 5;\n                return action === null || action === void 0 ? void 0 : action.reload();\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function reloadAndRest() {\n        return _reloadAndRest.apply(this, arguments);\n      }\n\n      return reloadAndRest;\n    }(),\n    reset: function () {\n      var _reset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _action$reset;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return props.resetAll();\n\n              case 2:\n                _context3.next = 4;\n                return action === null || action === void 0 ? void 0 : (_action$reset = action.reset) === null || _action$reset === void 0 ? void 0 : _action$reset.call(action);\n\n              case 4:\n                _context3.next = 6;\n                return action === null || action === void 0 ? void 0 : action.reload();\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function reset() {\n        return _reset.apply(this, arguments);\n      }\n\n      return reset;\n    }(),\n    fullScreen: function fullScreen() {\n      return props.fullScreen();\n    },\n    clearSelected: function clearSelected() {\n      return props.onCleanSelected();\n    },\n    setPageInfo: function setPageInfo(rest) {\n      return action.setPageInfo(rest);\n    }\n  }); // eslint-disable-next-line no-param-reassign\n\n\n  ref.current = userAction;\n}\n/**\n * 一个转化的 pipeline 列表\n *\n * @param data\n * @param pipeline\n */\n\nexport function postDataPipeline(data, pipeline) {\n  if (pipeline.filter(function (item) {\n    return item;\n  }).length < 1) {\n    return data;\n  }\n\n  return pipeline.reduce(function (pre, postData) {\n    return postData(pre);\n  }, data);\n}\nexport var isBordered = function isBordered(borderType, border) {\n  if (border === undefined) {\n    return false;\n  } // debugger\n\n\n  if (typeof border === 'boolean') {\n    return border;\n  }\n\n  return border[borderType];\n};\nexport var isMergeCell = function isMergeCell(dom) {\n  var _dom$props;\n\n  return dom && _typeof(dom) === 'object' && (dom === null || dom === void 0 ? void 0 : (_dom$props = dom.props) === null || _dom$props === void 0 ? void 0 : _dom$props.colSpan);\n};\n/**\n * 根据 key 和 dataIndex 生成唯一 id\n *\n * @param key 用户设置的 key\n * @param dataIndex 在对象中的数据\n * @param index 序列号，理论上唯一\n */\n\nexport var genColumnKey = function genColumnKey(key, index) {\n  if (key) {\n    return Array.isArray(key) ? key.join('-') : key.toString();\n  }\n\n  return \"\".concat(index);\n};\n/**\n * 将 ProTable - column - dataIndex 转为字符串形式\n *\n * @param dataIndex Column 中的 dataIndex\n */\n\nfunction parseDataIndex(dataIndex) {\n  if (Array.isArray(dataIndex)) {\n    return dataIndex.join(',');\n  }\n\n  return dataIndex === null || dataIndex === void 0 ? void 0 : dataIndex.toString();\n}\n/**\n * 从 ProColumns 数组中取出默认的排序和筛选数据\n *\n * @param columns ProColumns\n */\n\n\nexport function parseDefaultColumnConfig(columns) {\n  var filter = {};\n  var sort = {};\n  columns.forEach(function (column) {\n    // 转换 dataIndex\n    var dataIndex = parseDataIndex(column.dataIndex);\n\n    if (!dataIndex) {\n      return;\n    } // 当 column 启用 filters 功能时，取出默认的筛选值\n\n\n    if (column.filters) {\n      var defaultFilteredValue = column.defaultFilteredValue;\n\n      if (defaultFilteredValue === undefined) {\n        filter[dataIndex] = null;\n      } else {\n        filter[dataIndex] = column.defaultFilteredValue;\n      }\n    } // 当 column 启用 sorter 功能时，取出默认的排序值\n\n\n    if (column.sorter && column.defaultSortOrder) {\n      sort[dataIndex] = column.defaultSortOrder;\n    }\n  });\n  return {\n    sort: sort,\n    filter: filter\n  };\n}\n/**\n * 数据排序核心逻辑\n *\n * @param oldIndex 原始位置\n * @param newIndex 新位置\n * @param data 原始数组\n */\n\nexport function sortData(_ref, data) {\n  var oldIndex = _ref.oldIndex,\n      newIndex = _ref.newIndex;\n\n  if (oldIndex !== newIndex) {\n    var newData = arrayMoveImmutable(_toConsumableArray(data || []), oldIndex, newIndex).filter(function (el) {\n      return !!el;\n    });\n    return _toConsumableArray(newData);\n  }\n  /* istanbul ignore next */\n\n\n  return null;\n}"]},"metadata":{},"sourceType":"module"}
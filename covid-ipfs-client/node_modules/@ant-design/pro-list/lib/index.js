"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseProList = BaseProList;
exports.ProList = ProList;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

require("antd/es/config-provider/style");

var _configProvider = _interopRequireDefault(require("antd/es/config-provider"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _proTable = _interopRequireDefault(require("@ant-design/pro-table"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

require("./index.less");

var _ListView = _interopRequireDefault(require("./ListView"));

var _excluded = ["metas", "split", "footer", "rowKey", "tooltip", "className", "options", "search", "expandable", "showActions", "showExtra", "rowSelection", "pagination", "itemLayout", "renderItem", "grid", "itemCardProps", "onRow", "onItem", "rowClassName", "locale", "itemHeaderRender", "itemTitleRender"];

function ProList(props) {
  var metals = props.metas,
      split = props.split,
      footer = props.footer,
      rowKey = props.rowKey,
      tooltip = props.tooltip,
      className = props.className,
      _props$options = props.options,
      options = _props$options === void 0 ? false : _props$options,
      _props$search = props.search,
      search = _props$search === void 0 ? false : _props$search,
      expandable = props.expandable,
      showActions = props.showActions,
      showExtra = props.showExtra,
      _props$rowSelection = props.rowSelection,
      propRowSelection = _props$rowSelection === void 0 ? false : _props$rowSelection,
      _props$pagination = props.pagination,
      propsPagination = _props$pagination === void 0 ? false : _props$pagination,
      itemLayout = props.itemLayout,
      renderItem = props.renderItem,
      grid = props.grid,
      itemCardProps = props.itemCardProps,
      onRow = props.onRow,
      onItem = props.onItem,
      rowClassName = props.rowClassName,
      locale = props.locale,
      itemHeaderRender = props.itemHeaderRender,
      itemTitleRender = props.itemTitleRender,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var actionRef = (0, _react.useRef)();
  (0, _react.useImperativeHandle)(rest.actionRef, function () {
    return actionRef.current;
  });

  var _useContext = (0, _react.useContext)(_configProvider.default.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var proTableColumns = (0, _react.useMemo)(function () {
    var columns = [];
    Object.keys(metals || {}).forEach(function (key) {
      var meta = metals[key] || {};
      var valueType = meta.valueType;

      if (!valueType) {
        // 根据 key 给不同的 valueType
        if (key === 'avatar') {
          valueType = 'avatar';
        }

        if (key === 'actions') {
          valueType = 'option';
        }

        if (key === 'description') {
          valueType = 'textarea';
        }
      }

      columns.push((0, _objectSpread2.default)((0, _objectSpread2.default)({
        listKey: key,
        dataIndex: (meta === null || meta === void 0 ? void 0 : meta.dataIndex) || key
      }, meta), {}, {
        valueType: valueType
      }));
    });
    return columns;
  }, [metals]);
  var prefixCls = getPrefixCls('pro-list', props.prefixCls);
  var listClassName = (0, _classnames.default)(prefixCls, (0, _defineProperty2.default)({}, "".concat(prefixCls, "-no-split"), !split));
  return /*#__PURE__*/_react.default.createElement(_proTable.default, (0, _extends2.default)({
    tooltip: tooltip
  }, rest, {
    actionRef: actionRef,
    pagination: propsPagination,
    type: "list",
    rowSelection: propRowSelection,
    search: search,
    options: options,
    className: (0, _classnames.default)(prefixCls, className, listClassName),
    columns: proTableColumns,
    rowKey: rowKey,
    tableViewRender: function tableViewRender(_ref) {
      var columns = _ref.columns,
          size = _ref.size,
          pagination = _ref.pagination,
          rowSelection = _ref.rowSelection,
          dataSource = _ref.dataSource,
          loading = _ref.loading;
      return /*#__PURE__*/_react.default.createElement(_ListView.default, {
        grid: grid,
        itemCardProps: itemCardProps,
        itemTitleRender: itemTitleRender,
        prefixCls: props.prefixCls,
        columns: columns,
        renderItem: renderItem,
        actionRef: actionRef,
        dataSource: dataSource || [],
        size: size,
        footer: footer,
        split: split,
        rowKey: rowKey,
        expandable: expandable,
        rowSelection: propRowSelection === false ? undefined : rowSelection,
        showActions: showActions,
        showExtra: showExtra,
        pagination: pagination,
        itemLayout: itemLayout,
        loading: loading,
        itemHeaderRender: itemHeaderRender,
        onRow: onRow,
        onItem: onItem,
        rowClassName: rowClassName,
        locale: locale
      });
    }
  }));
}

function BaseProList(props) {
  return /*#__PURE__*/_react.default.createElement(ProList, (0, _extends2.default)({
    cardProps: false,
    search: false,
    toolBarRender: false
  }, props));
}

var _default = ProList;
exports.default = _default;
import "antd/es/date-picker/style";
import _DatePicker from "antd/es/date-picker";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";
import { useIntl } from '@ant-design/pro-provider';
import { FieldLabel, parseValueToMoment } from '@ant-design/pro-utils';
import moment from 'moment';
import React, { useContext, useState } from 'react';
import './index.less';
/**
 * 日期选择组件
 *
 * @param
 */

var FieldDatePicker = function FieldDatePicker(_ref, ref) {
  var text = _ref.text,
      mode = _ref.mode,
      format = _ref.format,
      label = _ref.label,
      light = _ref.light,
      render = _ref.render,
      renderFormItem = _ref.renderFormItem,
      plain = _ref.plain,
      showTime = _ref.showTime,
      fieldProps = _ref.fieldProps,
      picker = _ref.picker,
      bordered = _ref.bordered,
      lightLabel = _ref.lightLabel,
      labelTrigger = _ref.labelTrigger;
  var intl = useIntl();
  var size = useContext(_ConfigProvider.SizeContext);

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-field-date-picker');

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  if (mode === 'read') {
    var dom = text ? moment(text).format(fieldProps.format || format || 'YYYY-MM-DD') : '-';

    if (render) {
      return render(text, _objectSpread({
        mode: mode
      }, fieldProps), /*#__PURE__*/React.createElement(React.Fragment, null, dom));
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, dom);
  }

  if (mode === 'edit' || mode === 'update') {
    var _dom;

    var disabled = fieldProps.disabled,
        value = fieldProps.value,
        _onChange = fieldProps.onChange,
        allowClear = fieldProps.allowClear,
        _fieldProps$placehold = fieldProps.placeholder,
        placeholder = _fieldProps$placehold === void 0 ? intl.getMessage('tableForm.selectPlaceholder', '请选择') : _fieldProps$placehold;
    var momentValue = parseValueToMoment(value);

    if (light) {
      var valueStr = momentValue && momentValue.format(format) || '';
      _dom = /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-light"),
        onClick: function onClick(e) {
          var _lightLabel$current, _lightLabel$current$l, _lightLabel$current$l2;

          // 点击label切换下拉菜单
          var isLabelClick = lightLabel === null || lightLabel === void 0 ? void 0 : (_lightLabel$current = lightLabel.current) === null || _lightLabel$current === void 0 ? void 0 : (_lightLabel$current$l = _lightLabel$current.labelRef) === null || _lightLabel$current$l === void 0 ? void 0 : (_lightLabel$current$l2 = _lightLabel$current$l.current) === null || _lightLabel$current$l2 === void 0 ? void 0 : _lightLabel$current$l2.contains(e.target);

          if (isLabelClick) {
            setOpen(!open);
          } else {
            setOpen(true);
          }
        }
      }, /*#__PURE__*/React.createElement(_DatePicker, _extends({
        picker: picker,
        showTime: showTime,
        format: format,
        ref: ref
      }, fieldProps, {
        value: momentValue,
        onChange: function onChange(v) {
          _onChange === null || _onChange === void 0 ? void 0 : _onChange(v);
          setTimeout(function () {
            setOpen(false);
          }, 0);
        },
        onOpenChange: function onOpenChange(isOpen) {
          if (!labelTrigger) {
            setOpen(isOpen);
          }
        },
        open: open
      })), /*#__PURE__*/React.createElement(FieldLabel, {
        label: label,
        disabled: disabled,
        placeholder: placeholder,
        size: size,
        value: valueStr,
        onClear: function onClear() {
          _onChange === null || _onChange === void 0 ? void 0 : _onChange(null);
        },
        allowClear: allowClear,
        bordered: bordered,
        expanded: open,
        ref: lightLabel
      }));
    } else {
      _dom = /*#__PURE__*/React.createElement(_DatePicker, _extends({
        picker: picker,
        showTime: showTime,
        format: format,
        placeholder: placeholder,
        bordered: plain === undefined ? true : !plain,
        ref: ref
      }, fieldProps, {
        value: momentValue
      }));
    }

    if (renderFormItem) {
      return renderFormItem(text, _objectSpread({
        mode: mode
      }, fieldProps), _dom);
    }

    return _dom;
  }

  return null;
};

export default /*#__PURE__*/React.forwardRef(FieldDatePicker);
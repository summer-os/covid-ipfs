import "antd/es/button/style";
import _Button from "antd/es/button";
import _extends from "@babel/runtime/helpers/esm/extends";
import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React from "react";
import { PlusOutlined } from '@ant-design/icons';
import { nanoid, runFunction } from '@ant-design/pro-utils';
import { omit } from 'lodash';
import { useMemo, useRef, useState } from 'react';
import { ProFormListItem } from './ListItem';

var ProFormListContainer = function ProFormListContainer(props) {
  var creatorButtonProps = props.creatorButtonProps,
      prefixCls = props.prefixCls,
      children = props.children,
      creatorRecord = props.creatorRecord,
      action = props.action,
      fields = props.fields,
      actionGuard = props.actionGuard,
      max = props.max,
      fieldExtraRender = props.fieldExtraRender,
      meta = props.meta;
  var fieldKeyMap = useRef(new Map());

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      loading = _useState2[0],
      setLoading = _useState2[1];

  var uuidFields = useMemo(function () {
    return fields.map(function (field) {
      var _fieldKeyMap$current, _fieldKeyMap$current3;

      if (!((_fieldKeyMap$current = fieldKeyMap.current) === null || _fieldKeyMap$current === void 0 ? void 0 : _fieldKeyMap$current.has(field.key.toString()))) {
        var _fieldKeyMap$current2;

        (_fieldKeyMap$current2 = fieldKeyMap.current) === null || _fieldKeyMap$current2 === void 0 ? void 0 : _fieldKeyMap$current2.set(field.key.toString(), nanoid());
      }

      var uuid = (_fieldKeyMap$current3 = fieldKeyMap.current) === null || _fieldKeyMap$current3 === void 0 ? void 0 : _fieldKeyMap$current3.get(field.key.toString());
      return _objectSpread(_objectSpread({}, field), {}, {
        uuid: uuid
      });
    });
  }, [fields]);
  /**
   * 根据行为守卫包装action函数
   */

  var wrapperAction = useMemo(function () {
    var wrapAction = _objectSpread({}, action);

    var count = uuidFields.length;

    if (actionGuard === null || actionGuard === void 0 ? void 0 : actionGuard.beforeAddRow) {
      wrapAction.add = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _len,
            rest,
            _key,
            success,
            _args = arguments;

        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                for (_len = _args.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {
                  rest[_key] = _args[_key];
                }

                _context.next = 3;
                return actionGuard.beforeAddRow.apply(actionGuard, rest.concat([count]));

              case 3:
                success = _context.sent;

                if (!success) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return", action.add.apply(action, rest));

              case 6:
                return _context.abrupt("return", false);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    }

    if (actionGuard === null || actionGuard === void 0 ? void 0 : actionGuard.beforeRemoveRow) {
      wrapAction.remove = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var _len2,
            rest,
            _key2,
            success,
            _args2 = arguments;

        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                for (_len2 = _args2.length, rest = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  rest[_key2] = _args2[_key2];
                }

                _context2.next = 3;
                return actionGuard.beforeRemoveRow.apply(actionGuard, rest.concat([count]));

              case 3:
                success = _context2.sent;

                if (!success) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", action.remove.apply(action, rest));

              case 6:
                return _context2.abrupt("return", false);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    }

    return wrapAction;
  }, [action, actionGuard, uuidFields]);
  var creatorButton = useMemo(function () {
    if (creatorButtonProps === false || uuidFields.length === max) return null;

    var _ref3 = creatorButtonProps || {},
        _ref3$position = _ref3.position,
        position = _ref3$position === void 0 ? 'bottom' : _ref3$position,
        _ref3$creatorButtonTe = _ref3.creatorButtonText,
        creatorButtonText = _ref3$creatorButtonTe === void 0 ? '添加一行数据' : _ref3$creatorButtonTe;

    return /*#__PURE__*/React.createElement(_Button, _extends({
      className: "".concat(prefixCls, "-creator-button-").concat(position),
      type: "dashed",
      loading: loading,
      block: true,
      icon: /*#__PURE__*/React.createElement(PlusOutlined, null)
    }, omit(creatorButtonProps || {}, ['position', 'creatorButtonText']), {
      onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var index;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                setLoading(true); // 如果不是从顶部开始添加，则插入的索引为当前行数

                index = uuidFields.length; // 如果是顶部，加到第一个，如果不是，为空就是最后一个

                if (position === 'top') index = 0;
                _context3.next = 5;
                return wrapperAction.add(runFunction(creatorRecord), index);

              case 5:
                setLoading(false);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))
    }), creatorButtonText);
  }, [creatorButtonProps, prefixCls, loading, wrapperAction, creatorRecord, uuidFields, max]);
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: 'max-content',
      maxWidth: '100%',
      minWidth: '100%'
    }
  }, creatorButtonProps !== false && (creatorButtonProps === null || creatorButtonProps === void 0 ? void 0 : creatorButtonProps.position) === 'top' && creatorButton, uuidFields.map(function (field, index) {
    return /*#__PURE__*/React.createElement(ProFormListItem, _extends({}, props, {
      key: field.uuid,
      field: field,
      index: index,
      action: wrapperAction,
      count: uuidFields.length
    }), children);
  }), fieldExtraRender && fieldExtraRender(wrapperAction, meta), creatorButtonProps !== false && (creatorButtonProps === null || creatorButtonProps === void 0 ? void 0 : creatorButtonProps.position) !== 'top' && creatorButton);
};

export { ProFormListContainer };